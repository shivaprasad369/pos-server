generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model tbl_banner {
  id          Int      @id @default(autoincrement())
  name        String
  title       String
  description String
  image       String
  createdAt   DateTime @default(now())
  experience String
}
model About {
  id        Int      @id @default(autoincrement())
  bio       String   @db.Text()
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Contact {
  id        Int      @id @default(autoincrement())
  email     String
  phone     String
  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model SocialMedia {
  id        Int      @id @default(autoincrement())
  github    String
  linkedIn  String
  twitter   String
}
model ContactFormSetting {
  id              Int     @id @default(autoincrement())
  email           String
  successMessage  String
  enableCaptcha   Boolean @default(false)
}
model Service {
  id          Int      @id @default(autoincrement())
  title       String
  description String   @db.Text()
  icon        String
}
model Approach {
  id          Int      @id @default(autoincrement())
  title       String
  description String   @db.Text()
  icon        String
 
}
model SkillsCategory {
  id           Int     @id @default(autoincrement())
  mainCategory String
  slug         String  @unique
  skills       Skill[]
}

model Skill {
  id               Int            @id @default(autoincrement())
  name             String
  skillsCategoryId Int
  category         SkillsCategory @relation(fields: [skillsCategoryId], references: [id], onDelete: Cascade)
}
model Contacts {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String     @db.Text()
  reply     String?   // Optional
  viewed    Boolean   @default(false)
  createdAt DateTime  @default(now())
}
model Education {
  id            Int      @id @default(autoincrement())
  institution   String
  degree        String
  fieldOfStudy  String
  location      String
  startDate     DateTime
  endDate       DateTime
  description   String    @db.Text()
  gpaOrPercent  String?   // Optional field
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
model Experience {
  id               String     @id @default(uuid())
  jobTitle         String
  company          String
  location         String
  employmentType   String
  startDate        DateTime
  endDate          DateTime?
  description      String     @db.Text()
  responsibilities String     @db.Text()
  technologies     String     // Comma-separated
  companies        Company[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Company {
  id            Int        @id @default(autoincrement())
  name          String
  location      String
  industry      String
  site          String
  description   String     @db.Text()
  experienceId  String     // changed from Int to String
  experience    Experience @relation(fields: [experienceId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}
model Project {
  id           Int             @id @default(autoincrement())
  title        String
  summary      String
  description  String          @db.Text()
  technologies String
  github       String?
  liveUrl      String?
  date         DateTime
  featured     Boolean         @default(false)
  images       ProjectImage[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model ProjectImage {
  id        Int      @id @default(autoincrement())
  url       String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
}
model Blog {
  id             Int      @id @default(autoincrement()) // Primary key
  title          String   // Title of the blog
  summary        String   // Short summary of the blog
  description    String   @db.Text()
  image          String   // URL to the image
  publicationDate DateTime // Date the blog is published
  tags           String   // Comma separated tags, or you could define a relation if needed
 
}

model Admin{
  id       Int      @id @default(autoincrement()) // Primary key
  UserName String
  password String
}